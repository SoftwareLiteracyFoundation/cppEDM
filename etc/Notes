
General notes

1) The OSX XCode compiler/linker seems to be incompatible with the C++11
   standard implementation allowing template classes to be distributed into
   declarations (.h) and implementation (.cc).  However, this does entail
   explicit declaration of specialised template types in the .cc file.
   To support OSX, DataFrame.h contains both declarations and implemenations.
   See: libstdc++_Notes.txt.

2) The code relies heavily on class and data containers without explicit
   heap allocation.  This facilitates garbage collection.  It may be that
   copy-on-return for large data objects creates a performance issue.
   If the code encounters massive data objects/large problems, this may
   pose a limitation.  The use of object references may alleviate this.

3) The LAPACK library is used for the S-map solver. It calls the dgelss_()
   FORTRAN function.  On nix systems, OS-installed libraries are used.
   On Windows, the Windows for LAPACK libraries are needed.  These are
   built with mingw, so mingw libraries must be available.  It further
   seems that the mingw 32-bit libraries have to be used. See below. 

4) pyEDM implements a wrapper for cppEDM using PyBind11. This requires
   a MSVC build since Python extensions must be compiled with the same
   compiler as the Python interpreter. 

5) rEDM implements a wrapper for cppEDM using Rcpp. R includes the
   RTools package for building Windows binaries, and, it's own
   LAPACK libraries. 

--------------------------------------------------------------------
Building etc/Test.cc on Windows

This has been found to work on Windows 10 with MSVC 2019 build tools
and mingw. 

   Build cppEDM/src:
   nmake /f makefile.windows

   Compile cppEDM/etc/Test.cc into Test.obj:
   cl /c Test.cc /EHsc /MD /I../src

   Download .lib and .dll from Windows for LAPACKE:
   https://icl.cs.utk.edu/lapack-for-windows/lapack/#lapacke
   Copy .dll and .lib from LAPACKE_examples.zip into ../../lapacke

   Link Test.obj into Test.exe:
   link /OUT:Test.exe /LIBPATH:../lib /LIBPATH:../../lapacke EDM.lib
   liblapack.lib Test.obj

   Get missing libraries for LAPACK legacy:
   Downloaded libgfortran-3.dll into ../../lapacke
   https://www.opendll.com/index.php?file-download=libgfortran-3.dll&arch=32bit

   Downloaded libwinpthread-1.dll into ../../lapacke
   https://wikidll.com/mingw-w64/libwinpthread-1-dll

   Set PATH to find the lapacke and mingw dll's:
   PATH=../../lapacke;C:\MINGW\BIN;%PATH%

   Run Test.exe
